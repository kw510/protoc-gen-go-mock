package testify

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPackage = protogen.GoImportPath("context")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	mockPackage    = protogen.GoImportPath("github.com/stretchr/testify/mock")
)

// generateFile generates a _mock.pb.go file containing mock gRPC service definitions.
func GenerateFile(gen *protogen.Plugin, file *protogen.File, version string) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_mock.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-mock. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-mock v", version)
	g.P("// - protoc             ", protocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)

	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	clientName := service.GoName + "MockClient"
	g.P("type ", clientName, " struct {")
	g.P(mockPackage.Ident("Mock"))
	g.P("}")
	g.P()

	g.P("func New", clientName, " () *", service.GoName, "MockClient {")
	g.P("return &", clientName, "{}")
	g.P("}")
	g.P()

	var methodIndex, streamIndex int
	// Client method implementations.
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			genClientMethod(gen, file, g, method, methodIndex)
			methodIndex++
		} else {
			// Streaming RPC method
			genClientMethod(gen, file, g, method, streamIndex)
			streamIndex++
		}
	}
}

func genClientMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, method *protogen.Method, index int) {
	service := method.Parent
	// fmSymbol := "helper.formatFullMethodSymbol(service, method)"
	g.P("func (c *", service.GoName, "MockClient) ", clientSignature(g, method), "{")

	// Unary
	if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		g.P("args := c.Called(ctx, in, opts)")
		g.P("return args.Get(0).(*", g.QualifiedGoIdent(method.Output.GoIdent), "), args.Error(1)")
		g.P("}")
		g.P()
		return
	}

	streamType := service.GoName + method.GoName + "MockClient"
	// serviceDescVar := service.GoName + "_ServiceDesc"
	s := "args := c.Called(ctx "
	if !method.Desc.IsStreamingClient() {
		s += ", in"
	}
	s += ", opts)"
	g.P(s)
	g.P("return args.Get(0).(", method.Parent.GoName+"_"+method.GoName+"Client", "), args.Error(1)")
	g.P("}")
	g.P()

	genSend := method.Desc.IsStreamingClient()
	genRecv := method.Desc.IsStreamingServer()
	genCloseAndRecv := !method.Desc.IsStreamingServer()

	g.P("type ", streamType, " struct {")
	g.P(grpcPackage.Ident("ClientStream"))
	g.P(mockPackage.Ident("Mock"))
	g.P("}")
	g.P()

	if genSend {
		g.P("func (x *", streamType, ") Send(m *", method.Input.GoIdent, ") error {")
		g.P("args := x.Called(m)")
		g.P("return args.Error(0)")
		g.P("}")
		g.P()
	}
	if genRecv {
		g.P("func (x *", streamType, ") Recv() (*", method.Output.GoIdent, ", error) {")
		g.P("args := x.Called()")
		g.P("return args.Get(0).(*", g.QualifiedGoIdent(method.Output.GoIdent), "), args.Error(1)")
		g.P("}")
		g.P()
	}
	if genCloseAndRecv {
		g.P("func (x *", streamType, ") CloseAndRecv() (*", method.Output.GoIdent, ", error) {")
		g.P("args := x.Called()")
		g.P("return args.Get(0).(*", g.QualifiedGoIdent(method.Output.GoIdent), "), args.Error(1)")
		g.P("}")
		g.P()
	}
}

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	if !method.Desc.IsStreamingClient() {
		s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent)
	}
	s += ", opts ..." + g.QualifiedGoIdent(grpcPackage.Ident("CallOption")) + ") ("
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	} else {
		s += method.Parent.GoName + "_" + method.GoName + "Client"
	}
	s += ", error)"
	return s
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
